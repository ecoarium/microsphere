CloudFormation do
  Description('Networking Setup')
  AWSTemplateFormatVersion('2010-09-09')

  VPC(:VPC) do
    EnableDnsSupport true
    EnableDnsHostnames true
    InstanceTenancy 'default'
    CidrBlock '10.0.0.0/24'
  end

  InternetGateway(:InternetGateway)

  VPCGatewayAttachment(:GatewayToInternet) do
    VpcId Ref(:VPC)
    InternetGatewayId Ref(:InternetGateway)
  end

  Subnet(:Subnet) do
    VpcId Ref(:VPC)
    CidrBlock '10.0.0.0/24'
  end

  RouteTable(:RouteTable) do
    VpcId Ref(:VPC)
  end

  SubnetRouteTableAssociation(:SubnetRouteTableAssociation) do
    SubnetId Ref(:Subnet)
    RouteTableId Ref(:RouteTable)
  end

  Route(:GatewayRoute) do
    DependsOn :GatewayToInternet
    RouteTableId Ref(:RouteTable)
    DestinationCidrBlock '0.0.0.0/0'
    GatewayId Ref(:InternetGateway)
  end

  NetworkAcl(:NetworkAcl) do
    VpcId Ref(:VPC)
  end

  NetworkAclEntry(:OutBoundNetworkAclEntry) do
    NetworkAclId Ref(:NetworkAcl)
    CidrBlock '0.0.0.0/0'
    Egress true
    Protocol -1
    RuleAction 'allow'
    RuleNumber 100
  end

  NetworkAclEntry(:InboundSshNetworkAclEntry) do
    NetworkAclId Ref(:NetworkAcl)
    CidrBlock '0.0.0.0/0'
    Egress false
    Protocol 6
    RuleAction 'allow'
    RuleNumber 101

    PortRange({
      From: 22,
      To:   22
    })
  end

  SubnetNetworkAclAssociation(:SubnetNetworkAclAssociation) do
    SubnetId Ref(:Subnet)
    NetworkAclId Ref(:NetworkAcl)
  end

  EC2_SecurityGroup(:SshSecurityGroup) do
    VpcId Ref(:VPC)
    GroupDescription 'ssh'
    SecurityGroupIngress [
      {
        CidrIp:     '0.0.0.0/0',
        IpProtocol: 'tcp',
        FromPort:   22,
        ToPort:     22
      }
    ]
  end

end
